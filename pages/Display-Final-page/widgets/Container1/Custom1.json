{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 51,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{appsmith.store.FeedbackData}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "x3q2nhpq38",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 31,
  "mobileLeftColumn": 2,
  "mobileRightColumn": 25,
  "mobileTopRow": 1,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 50,
  "originalTopRow": 4,
  "parentColumnSpace": 8.4091796875,
  "parentId": "14ra5m2kok",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 63,
  "srcDoc": {
    "css": "body {\n  font-family: \"Inter\", system-ui, sans-serif;\n}\n\n.waveform-widget {\n  font-family: \"Inter\", system-ui, sans-serif;\n  background: linear-gradient(112deg, #f8fafc 72%, #e6f7fa 100%);\n  padding: 32px 40px 28px 40px;\n  border-radius: 18px;\n  box-shadow: 0 4px 24px rgba(38, 125, 255, 0.06), 0 1.5px 4px rgba(75, 80, 90, 0.03);\n  box-sizing: border-box;\n  max-width: 580px;\n  min-width: 360px;\n  margin: 0 auto;\n  border: 1px solid #e5effb;\n}\n\n.section-title {\n  font-size: 18.5px;\n  font-weight: 700;\n  margin-top: 18px;\n  margin-bottom: 9px;\n  color: #1f2937;\n  letter-spacing: 0.015em;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.section-divider {\n  border-bottom: 1.5px solid #e3e9f5;\n  margin: 18px 0 9px 0;\n}\n\n.data-grid {\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: 13px 26px;\n  font-size: 15.2px;\n  margin-bottom: 17px;\n}\n\n.data-label {\n  color: #5d6e85;\n  font-weight: 600;\n  text-align: right;\n  letter-spacing: 0.01em;\n  align-self: center;\n  padding-right: 6px;\n}\n\n.data-value {\n  align-self: center;\n}\n\n.data-input {\n  font-family: \"Inter\", system-ui, sans-serif;\n  font-size: 15.2px;\n  background: #f3f7fa;\n  border: 1.6px solid #dae6f3;\n  color: #384868;\n  font-weight: 500;\n  border-radius: 6.2px;\n  min-width: 60px;\n  padding: 2.2px 11px 2.2px 10px;\n  pointer-events: none;\n  outline: none;\n  box-shadow: none;\n  appearance: textfield;\n  text-align: right;\n  margin-left: 2px;\n}\n\n.status-pill {\n  margin-left: 8px;\n  background: #ecf8f8;\n  color: #08816a;\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 14px;\n  display: inline-block;\n  padding: 3.7px 15px;\n  vertical-align: middle;\n  border: none;\n  box-shadow: 0 1px 1.5px rgba(143, 227, 231, 0.6588235294);\n  letter-spacing: 0.01em;\n}\n\n.status-pill.unstable {\n  background: #fff2ec;\n  color: #ea544a;\n}\n\n.status-pill.stable {\n  background: #e3fbea;\n  color: #159a61;\n}\n\n.warning-list {\n  background: linear-gradient(104deg, #fffbe7 85%, #fff2d6 100%);\n  color: #b77a00;\n  border: 1px solid #ffe4b2;\n  border-radius: 7px;\n  font-size: 14.7px;\n  padding: 12px 27px 10px 22px;\n  margin-top: 10px;\n  margin-bottom: 17px;\n  line-height: 1.67;\n  box-shadow: 0 2px 7px rgba(255, 238, 204, 0.2196078431);\n}\n\n.chart-wrapper {\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 1.5px 7px rgba(207, 235, 255, 0.1529411765);\n  padding: 12px 5px 8px 5px;\n  margin: 18px auto 16px auto;\n  min-width: 0;\n  max-width: 410px;\n  width: 99%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.chart-title {\n  color: #1273de;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 0px;\n  margin-left: 2px;\n  letter-spacing: 0.01em;\n  text-align: center;\n}\n\n.chart-wrapper canvas {\n  display: block;\n  margin: 0 auto;\n  width: 99% !important;\n  height: 160px !important;\n  max-width: 100% !important;\n  min-width: 120px !important;\n  background: #fff;\n  border-radius: 7px;\n}\n\n.droplet-sat {\n  color: #d44f24;\n  font-weight: 700;\n  font-size: 14px;\n  margin-top: 4px;\n  display: inline-block;\n  letter-spacing: 0.01em;\n}\n\n.recommend-block {\n  margin-top: 17px;\n  padding: 19px 22px 14px 16px;\n  background: linear-gradient(98deg, #ecf8ff 80%, #e7fce3 100%);\n  border-radius: 11px;\n  border: 1px solid #bde6fa;\n  box-shadow: 0 1.5px 3px rgba(189, 230, 250, 0.2666666667);\n}\n\n.recommend-block .section-title {\n  font-size: 16.5px;\n  margin-bottom: 8px;\n  color: #0a3e82;\n  letter-spacing: 0.006em;\n}\n\n@media (max-width: 600px) {\n  .waveform-widget {\n    max-width: 98vw !important;\n    padding: 16px 6vw 18px 6vw;\n    min-width: 0 !important;\n  }\n  .chart-wrapper {\n    max-width: 99vw;\n    width: 99vw;\n    min-width: 0;\n    padding: 10px 1vw 10px 1vw;\n  }\n  .chart-wrapper canvas {\n    width: 98vw !important;\n    min-width: 0 !important;\n    height: 135px !important;\n  }\n}",
    "html": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\"/>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js\"></script>\n<div id=\"root\"></div>",
    "js": "import React from 'https://esm.sh/react@18.2.0';\nimport ReactDOM from 'https://esm.sh/react-dom@18.2.0';\nconst ICONS = {\n  waveform: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"22\",\n    height: \"22\",\n    viewBox: \"0 0 22 22\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.5 12.2l.857 1.716c.54 1.08 2.01 1.15 2.624.122l3.092-5.048a1.5 1.5 0 012.498 0l3.092 5.048c.614 1.028 2.084.958 2.624-.122L18.5 12.2\",\n    stroke: \"#1882f7\",\n    strokeWidth: \"1.21\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"11\",\n    cy: \"11\",\n    r: \"10.15\",\n    stroke: \"#00bad6\",\n    strokeWidth: \"1.7\"\n  })),\n  check: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"19\",\n    height: \"19\",\n    viewBox: \"0 0 23 23\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: \"11.276\",\n    cy: \"11.5\",\n    rx: \"10.282\",\n    ry: \"10\",\n    stroke: \"#20ae75\",\n    strokeWidth: \"1.5\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.317 9.354l-4.04 4.291-2.25-2.262\",\n    stroke: \"#20ae75\",\n    strokeWidth: \"1.6\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })),\n  drop: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"20\",\n    height: \"20\",\n    viewBox: \"0 0 20 20\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 2.667l5.36 6.932a5.285 5.285 0 01-1.153 7.97A5.285 5.285 0 0110 17.333a5.285 5.285 0 01-4.207-9.401L10 2.667z\",\n    stroke: \"#20bcd3\",\n    strokeWidth: \"1.5\"\n  })),\n  shield: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"19\",\n    height: \"19\",\n    viewBox: \"0 0 20 20\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 2.5l6.25 2.5v4.01c0 4.381-2.582 8.277-6.25 9.99-3.668-1.713-6.25-5.61-6.25-9.99V5L10 2.5z\",\n    stroke: \"#475adf\",\n    strokeWidth: \"1.2\"\n  }))\n};\nfunction DataGrid({\n  data\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data-grid\"\n  }, Object.entries(data).map(([k, v]) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: k\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data-label\"\n  }, k.replace(/_/g, ' ')), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"data-input\",\n    value: v === undefined ? '' : String(v),\n    readOnly: true,\n    tabIndex: -1\n  }))));\n}\nfunction StatusPill({\n  label,\n  status\n}) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `status-pill ${status}`\n  }, label);\n}\nfunction DropletSat({\n  hasSatellite\n}) {\n  return hasSatellite ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"droplet-sat\"\n  }, \"\\u2753 Satellites detected\") : null;\n}\nfunction Section({\n  icon,\n  title,\n  children,\n  divider\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\"\n  }, icon, title), children, divider ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-divider\"\n  }) : null);\n}\n\n// Chart data processor\nfunction getWaveformXY(shape, params) {\n  const {\n    riseTime_us: R = 10,\n    fallTime_us: F = 5,\n    dwellTime_us: D = 2.5,\n    recoveryTime_us: Re = 10,\n    peakPressure_Pa: P = 95000,\n    negativePeakPressure_Pa: NP = 15002\n  } = params || {};\n  if (shape === 'sigmoid') {\n    const steps = 24;\n    let xy = [];\n    for (let i = 0; i < steps; i++) {\n      let t = i * R / (steps - 1);\n      let y = P * (1 / (1 + Math.exp(-8 * (t / R - 0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < steps / 3; i++) {\n      let t = R + i * D / (steps / 3 - 1);\n      xy.push([t, P]);\n    }\n    for (let i = 1; i < steps; i++) {\n      let t = R + D + i * F / (steps - 1);\n      let y = P + (NP - P) * (1 / (1 + Math.exp(-8 * (i / (steps - 1) - 0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < Math.floor(steps / 2); i++) {\n      let t = R + D + F + i * Re / (Math.floor(steps / 2) - 1);\n      let y = NP + (0 - NP) * (1 / (1 + Math.exp(-7 * (i / (Math.floor(steps / 2) - 1) - 0.35))));\n      xy.push([t, y]);\n    }\n    return xy;\n  } else {\n    return [[0, 0], [R, P], [R + D, P], [R + D + F, NP], [R + D + F + Re, 0]];\n  }\n}\nconst WaveformChart = ({\n  chartId,\n  params,\n  shape,\n  title\n}) => {\n  React.useEffect(() => {\n    if (!params) return;\n    const xy = getWaveformXY(shape, params);\n    const labels = xy.map(([x, _]) => x.toFixed(1));\n    const data = xy.map(([_, y]) => y);\n    let chartEl = document.getElementById(chartId);\n    if (!chartEl) return;\n    if (chartEl.chartInstance) {\n      chartEl.chartInstance.destroy();\n    }\n    let chart = new window.Chart(chartEl, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [{\n          label: 'Pressure (Pa)',\n          data,\n          borderColor: '#1273de',\n          borderWidth: 2,\n          pointRadius: 2,\n          pointBackgroundColor: '#1273de',\n          pointHoverRadius: 5,\n          tension: 0.34,\n          fill: {\n            target: 'origin',\n            above: 'rgba(64,164,255,0.10)',\n            below: 'rgba(200,80,120,0.06)'\n          },\n          backgroundColor: 'rgba(40,170,250,0.04)'\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              label: ctx => `Pressure: ${ctx.parsed.y.toFixed(0)} Pa at ${ctx.label} μs`\n            }\n          }\n        },\n        layout: {\n          padding: 0\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Time (μs)',\n              color: '#1f2937',\n              font: {\n                family: 'Inter',\n                size: 13,\n                weight: 'bold'\n              }\n            },\n            ticks: {\n              color: '#5d6e85',\n              font: {\n                family: 'Inter',\n                size: 13\n              },\n              maxTicksLimit: 3,\n              autoSkip: true\n            },\n            grid: {\n              color: '#e9f2fd',\n              drawBorder: false\n            },\n            offset: false,\n            beginAtZero: true\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Pressure (Pa)',\n              color: '#1f2937',\n              font: {\n                family: 'Inter',\n                size: 13,\n                weight: 'bold'\n              }\n            },\n            ticks: {\n              color: '#5d6e85',\n              font: {\n                family: 'Inter',\n                size: 13\n              },\n              maxTicksLimit: 3,\n              autoSkip: true\n            },\n            min: Math.min(0, ...data),\n            max: Math.max(...data) * 1.13,\n            grid: {\n              color: '#f3f7fd',\n              drawBorder: false\n            },\n            offset: false\n          }\n        },\n        animation: false,\n        responsive: false,\n        maintainAspectRatio: false\n      }\n    });\n    chartEl.chartInstance = chart;\n    return () => {\n      chart.destroy();\n    };\n  }, [params, shape, chartId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-wrapper\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-title\"\n  }, title), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: chartId,\n    width: \"370\",\n    height: \"160\"\n  }));\n};\nfunction WaveformWidget() {\n  const [data, setData] = React.useState(appsmith.model);\n  React.useEffect(() => {\n    appsmith.onModelChange(model => {\n      setData(model);\n    });\n  }, []);\n  const updRec = data?.updatedRecommendation || {};\n  const dataSection = data?.data || {};\n  const waveform = updRec.waveform || {};\n  const droplet = updRec.droplet || {};\n  const isStable = typeof updRec.isStable === 'boolean' ? updRec.isStable : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"waveform-widget\"\n  }, /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.waveform,\n    title: \"Waveform\",\n    divider: true\n  }, /*#__PURE__*/React.createElement(WaveformChart, {\n    chartId: \"chart-recommend\",\n    params: waveform,\n    shape: waveform.shape,\n    title: \"Waveform Shape\"\n  }), /*#__PURE__*/React.createElement(DataGrid, {\n    data: {\n      'Rise time (μs)': waveform.riseTime_us,\n      'Fall time (μs)': waveform.fallTime_us,\n      'Dwell time (μs)': waveform.dwellTime_us,\n      'Recovery time (μs)': waveform.recoveryTime_us,\n      'Peak Pressure (Pa)': waveform.peakPressure_Pa,\n      'Negative Peak Pressure (Pa)': waveform.negativePeakPressure_Pa,\n      'Shape': waveform.shape\n    }\n  })), /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.drop,\n    title: \"Droplet Prediction\",\n    divider: true\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    data: {\n      'Size (μm)': droplet.size_um,\n      'Velocity (m/s)': droplet.velocity_mps,\n      'Break-off Time (μs)': droplet.breakOffTime_us,\n      'Stability': droplet.stabilityClass\n    }\n  }), /*#__PURE__*/React.createElement(DropletSat, {\n    hasSatellite: droplet.hasSatellite\n  })), /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.shield,\n    title: \"Overall Stability\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, isStable === null ? '' : isStable ? /*#__PURE__*/React.createElement(StatusPill, {\n    status: \"stable\",\n    label: \"Stable\"\n  }) : /*#__PURE__*/React.createElement(StatusPill, {\n    status: \"unstable\",\n    label: \"Unstable\"\n  }))), Object.keys(dataSection).length > 0 && /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.check,\n    title: \"Meta\",\n    divider: false\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    data: dataSection\n  })));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(WaveformWidget, null), document.getElementById('root'));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 5,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "body {\n  font-family: 'Inter', system-ui, sans-serif;\n}\n.waveform-widget {\n  font-family: 'Inter', system-ui, sans-serif;\n  background: linear-gradient(112deg, #f8fafc 72%, #e6f7fa 100%);\n  padding: 32px 40px 28px 40px;\n  border-radius: 18px;\n  box-shadow: 0 4px 24px rgba(38, 125, 255, 0.06), 0 1.5px 4px rgba(75,80,90,0.03);\n  box-sizing: border-box;\n  max-width: 580px;\n  min-width: 360px;\n  margin: 0 auto;\n  border: 1px solid #e5effb;\n}\n.section-title {\n  font-size: 18.5px;\n  font-weight: 700;\n  margin-top: 18px;\n  margin-bottom: 9px;\n  color: #1f2937;\n  letter-spacing: 0.015em;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n.section-divider {\n  border-bottom: 1.5px solid #e3e9f5;\n  margin: 18px 0 9px 0;\n}\n.data-grid {\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: 13px 26px;\n  font-size: 15.2px;\n  margin-bottom: 17px;\n}\n.data-label {\n  color: #5d6e85;\n  font-weight: 600;\n  text-align: right;\n  letter-spacing: 0.01em;\n  align-self: center;\n  padding-right: 6px;\n}\n.data-value {\n  align-self: center;\n}\n.data-input {\n  font-family: 'Inter', system-ui, sans-serif;\n  font-size: 15.2px;\n  background: #f3f7fa;\n  border: 1.6px solid #dae6f3;\n  color: #384868;\n  font-weight: 500;\n  border-radius: 6.2px;\n  min-width: 60px;\n  padding: 2.2px 11px 2.2px 10px;\n  pointer-events: none;\n  outline: none;\n  box-shadow: none;\n  appearance: textfield;\n  text-align: right;\n  margin-left: 2px;\n}\n.status-pill {\n  margin-left: 8px;\n  background: #ecf8f8;\n  color: #08816a;\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 14px;\n  display: inline-block;\n  padding: 3.7px 15px;\n  vertical-align: middle;\n  border: none;\n  box-shadow: 0 1px 1.5px #8fe3e7a8;\n  letter-spacing: 0.01em;\n}\n.status-pill.unstable {\n  background: #fff2ec;\n  color: #ea544a;\n}\n.status-pill.stable {\n  background: #e3fbea;\n  color: #159a61;\n}\n.warning-list {\n  background: linear-gradient(104deg,#fffbe7 85%, #fff2d6 100%);\n  color: #b77a00;\n  border: 1px solid #ffe4b2;\n  border-radius: 7px;\n  font-size: 14.7px;\n  padding: 12px 27px 10px 22px;\n  margin-top: 10px;\n  margin-bottom: 17px;\n  line-height: 1.67;\n  box-shadow: 0 2px 7px #ffeecc38;\n}\n.chart-wrapper {\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 1.5px 7px #cfebff27;\n  padding: 12px 5px 8px 5px;\n  margin: 18px auto 16px auto;\n  min-width: 0;\n  max-width: 410px;\n  width: 99%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.chart-title {\n  color: #1273de;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 0px;\n  margin-left: 2px;\n  letter-spacing: 0.01em;\n  text-align: center;\n}\n.chart-wrapper canvas {\n  display: block;\n  margin: 0 auto;\n  width: 99% !important;\n  height: 160px !important;\n  max-width: 100% !important;\n  min-width: 120px !important;\n  background: #fff;\n  border-radius: 7px;\n}\n.droplet-sat {\n  color: #d44f24;\n  font-weight: 700;\n  font-size: 14px;\n  margin-top: 4px;\n  display: inline-block;\n  letter-spacing: 0.01em;\n}\n.recommend-block {\n  margin-top: 17px;\n  padding: 19px 22px 14px 16px;\n  background: linear-gradient(98deg, #ecf8ff 80%, #e7fce3 100%);\n  border-radius: 11px;\n  border: 1px solid #bde6fa;\n  box-shadow: 0 1.5px 3px #bde6fa44;\n}\n.recommend-block .section-title {\n  font-size: 16.5px;\n  margin-bottom: 8px;\n  color: #0a3e82;\n  letter-spacing: 0.006em;\n}\n@media (max-width: 600px) {\n  .waveform-widget {\n    max-width: 98vw!important;\n    padding: 16px 6vw 18px 6vw;\n    min-width: 0!important;\n  }\n  .chart-wrapper {\n    max-width: 99vw;\n    width: 99vw;\n    min-width: 0;\n    padding: 10px 1vw 10px 1vw;\n  }\n  .chart-wrapper canvas {\n    width: 98vw !important;\n    min-width: 0 !important;\n    height: 135px !important;\n  }\n}\n",
    "html": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\"/>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js\"></script>\n<div id=\"root\"></div>",
    "js": "import React from 'https://esm.sh/react@18.2.0';\nimport ReactDOM from 'https://esm.sh/react-dom@18.2.0';\n\nconst ICONS = {\n  waveform: <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\"><path d=\"M3.5 12.2l.857 1.716c.54 1.08 2.01 1.15 2.624.122l3.092-5.048a1.5 1.5 0 012.498 0l3.092 5.048c.614 1.028 2.084.958 2.624-.122L18.5 12.2\" stroke=\"#1882f7\" strokeWidth=\"1.21\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/><circle cx=\"11\" cy=\"11\" r=\"10.15\" stroke=\"#00bad6\" strokeWidth=\"1.7\"/></svg>,\n  check: <svg width=\"19\" height=\"19\" viewBox=\"0 0 23 23\" fill=\"none\"><ellipse cx=\"11.276\" cy=\"11.5\" rx=\"10.282\" ry=\"10\" stroke=\"#20ae75\" strokeWidth=\"1.5\"/><path d=\"M15.317 9.354l-4.04 4.291-2.25-2.262\" stroke=\"#20ae75\" strokeWidth=\"1.6\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></svg>,\n  drop: <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\"><path d=\"M10 2.667l5.36 6.932a5.285 5.285 0 01-1.153 7.97A5.285 5.285 0 0110 17.333a5.285 5.285 0 01-4.207-9.401L10 2.667z\" stroke=\"#20bcd3\" strokeWidth=\"1.5\"/></svg>,\n  shield: <svg width=\"19\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\"><path d=\"M10 2.5l6.25 2.5v4.01c0 4.381-2.582 8.277-6.25 9.99-3.668-1.713-6.25-5.61-6.25-9.99V5L10 2.5z\" stroke=\"#475adf\" strokeWidth=\"1.2\"/></svg>\n};\n\nfunction DataGrid({ data }) {\n  return (\n    <div className=\"data-grid\">\n      {Object.entries(data).map(([k, v]) => (\n        <React.Fragment key={k}>\n          <div className=\"data-label\">{k.replace(/_/g, ' ')}</div>\n          <input className=\"data-input\" value={v === undefined ? '' : String(v)} readOnly tabIndex={-1} />\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n\nfunction StatusPill({ label, status }) {\n  return <span className={`status-pill ${status}`}>{label}</span>;\n}\n\nfunction DropletSat({ hasSatellite }) {\n  return hasSatellite ? (<span className=\"droplet-sat\">❓ Satellites detected</span>) : null;\n}\n\nfunction Section({ icon, title, children, divider }) {\n  return (\n    <div>\n      <div className=\"section-title\">{icon}{title}</div>\n      {children}\n      {divider ? <div className=\"section-divider\" /> : null}\n    </div>\n  );\n}\n\n// Chart data processor\nfunction getWaveformXY(shape, params) {\n  const {\n    riseTime_us: R = 10,\n    fallTime_us: F = 5,\n    dwellTime_us: D = 2.5,\n    recoveryTime_us: Re = 10,\n    peakPressure_Pa: P = 95000,\n    negativePeakPressure_Pa: NP = 15002\n  } = params || {};\n  if (shape === 'sigmoid') {\n    const steps = 24;\n    let xy = [];\n    for (let i = 0; i < steps; i++) {\n      let t = i * R / (steps - 1);\n      let y = P * (1 / (1 + Math.exp(-8 * (t / R - 0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < steps / 3; i++) {\n      let t = R + i * D / (steps / 3 - 1);\n      xy.push([t, P]);\n    }\n    for (let i = 1; i < steps; i++) {\n      let t = R + D + i * F / (steps - 1);\n      let y = P + (NP - P) * (1 / (1 + Math.exp(-8 * (i / (steps - 1) - 0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < Math.floor(steps / 2); i++) {\n      let t = R + D + F + i * Re / (Math.floor(steps / 2) - 1);\n      let y = NP + (0 - NP) * (1 / (1 + Math.exp(-7 * (i / (Math.floor(steps / 2) - 1) - 0.35))));\n      xy.push([t, y]);\n    }\n    return xy;\n  } else {\n    return [\n      [0, 0],\n      [R, P],\n      [R + D, P],\n      [R + D + F, NP],\n      [R + D + F + Re, 0]\n    ];\n  }\n}\n\nconst WaveformChart = ({ chartId, params, shape, title }) => {\n  React.useEffect(() => {\n    if (!params) return;\n    const xy = getWaveformXY(shape, params);\n    const labels = xy.map(([x, _]) => x.toFixed(1));\n    const data = xy.map(([_, y]) => y);\n    let chartEl = document.getElementById(chartId);\n    if (!chartEl) return;\n    if (chartEl.chartInstance) {\n      chartEl.chartInstance.destroy();\n    }\n    let chart = new window.Chart(chartEl, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: 'Pressure (Pa)',\n            data,\n            borderColor: '#1273de',\n            borderWidth: 2,\n            pointRadius: 2,\n            pointBackgroundColor: '#1273de',\n            pointHoverRadius: 5,\n            tension: 0.34,\n            fill: {\n              target: 'origin',\n              above: 'rgba(64,164,255,0.10)',\n              below: 'rgba(200,80,120,0.06)',\n            },\n            backgroundColor: 'rgba(40,170,250,0.04)',\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          legend: { display: false },\n          title: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (ctx) => `Pressure: ${ctx.parsed.y.toFixed(0)} Pa at ${ctx.label} μs`\n            }\n          }\n        },\n        layout: { padding: 0 },\n        scales: {\n          x: {\n            title: { display: true, text: 'Time (μs)', color:'#1f2937', font:{family:'Inter',size:13,weight:'bold'} },\n            ticks: { color: '#5d6e85', font: {family:'Inter',size:13}, maxTicksLimit: 3, autoSkip: true },\n            grid: { color:'#e9f2fd', drawBorder:false },\n            offset: false,\n            beginAtZero: true\n          },\n          y: {\n            title: { display: true, text: 'Pressure (Pa)', color:'#1f2937', font:{family:'Inter',size:13,weight:'bold'} },\n            ticks: { color: '#5d6e85', font: {family:'Inter',size:13}, maxTicksLimit: 3, autoSkip: true },\n            min: Math.min(0, ...data),\n            max: Math.max(...data)*1.13,\n            grid: { color:'#f3f7fd', drawBorder:false },\n            offset: false\n          },\n        },\n        animation: false,\n        responsive: false,\n        maintainAspectRatio: false,\n      },\n    });\n    chartEl.chartInstance = chart;\n    return () => { chart.destroy(); };\n  }, [params, shape, chartId]);\n\n  return (\n    <div className=\"chart-wrapper\">\n      <div className=\"chart-title\">{title}</div>\n      <canvas id={chartId} width=\"370\" height=\"160\"></canvas>\n    </div>\n  );\n};\n\nfunction WaveformWidget() {\n  const [data, setData] = React.useState(appsmith.model);\n\n  React.useEffect(() => {\n    appsmith.onModelChange((model) => {\n      setData(model);\n    });\n  }, []);\n\n  const updRec = data?.updatedRecommendation || {};\n  const dataSection = data?.data || {};\n  const waveform = updRec.waveform || {};\n  const droplet = updRec.droplet || {};\n  const isStable = typeof updRec.isStable === 'boolean' ? updRec.isStable : null;\n\n  return (\n    <div className=\"waveform-widget\">\n      <Section icon={ICONS.waveform} title=\"Waveform\" divider>\n        <WaveformChart\n          chartId=\"chart-recommend\"\n          params={waveform}\n          shape={waveform.shape}\n          title={\"Waveform Shape\"}\n        />\n        <DataGrid data={{\n          'Rise time (μs)': waveform.riseTime_us,\n          'Fall time (μs)': waveform.fallTime_us,\n          'Dwell time (μs)': waveform.dwellTime_us,\n          'Recovery time (μs)': waveform.recoveryTime_us,\n          'Peak Pressure (Pa)': waveform.peakPressure_Pa,\n          'Negative Peak Pressure (Pa)': waveform.negativePeakPressure_Pa,\n          'Shape': waveform.shape\n        }} />\n      </Section>\n\n      <Section icon={ICONS.drop} title=\"Droplet Prediction\" divider>\n        <DataGrid data={{\n          'Size (μm)': droplet.size_um,\n          'Velocity (m/s)': droplet.velocity_mps,\n          'Break-off Time (μs)': droplet.breakOffTime_us,\n          'Stability': droplet.stabilityClass\n        }} />\n        <DropletSat hasSatellite={droplet.hasSatellite} />\n      </Section>\n\n      <Section icon={ICONS.shield} title=\"Overall Stability\">\n        <span>\n          {isStable === null\n            ? ''\n            : isStable ? <StatusPill status=\"stable\" label=\"Stable\" />\n                       : <StatusPill status=\"unstable\" label=\"Unstable\" />}\n        </span>\n      </Section>\n\n      {Object.keys(dataSection).length > 0 && (\n        <Section icon={ICONS.check} title=\"Meta\" divider={false}>\n          <DataGrid data={dataSection} />\n        </Section>\n      )}\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<WaveformWidget />, document.getElementById('root'));\n});\n"
  },
  "version": 1,
  "widgetId": "01v4ym8sw3",
  "widgetName": "Custom1"
}