{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 47,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{appsmith.store.FeedbackData}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "x3q2nhpq38",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 31,
  "mobileLeftColumn": 2,
  "mobileRightColumn": 25,
  "mobileTopRow": 1,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 8.4091796875,
  "parentId": "14ra5m2kok",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 63,
  "srcDoc": {
    "css": "body {\n  font-family: \"Inter\", system-ui, sans-serif;\n}\n\n.waveform-widget {\n  font-family: \"Inter\", system-ui, sans-serif;\n  background: linear-gradient(112deg, #f8fafc 72%, #e6f7fa 100%);\n  padding: 32px 40px 28px 40px;\n  border-radius: 18px;\n  box-shadow: 0 4px 24px rgba(38, 125, 255, 0.06), 0 1.5px 4px rgba(75, 80, 90, 0.03);\n  box-sizing: border-box;\n  max-width: 580px;\n  min-width: 360px;\n  margin: 0 auto;\n  border: 1px solid #e5effb;\n}\n\n.section-title {\n  font-size: 18.5px;\n  font-weight: 700;\n  margin-top: 18px;\n  margin-bottom: 9px;\n  color: #1f2937;\n  letter-spacing: 0.015em;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.section-divider {\n  border-bottom: 1.5px solid #e3e9f5;\n  margin: 18px 0 9px 0;\n}\n\n.data-grid {\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: 10px 30px;\n  font-size: 15.2px;\n  margin-bottom: 17px;\n}\n\n.data-label {\n  color: #5d6e85;\n  font-weight: 500;\n  padding-right: 5px;\n  text-align: right;\n  letter-spacing: 0.01em;\n}\n\n.data-value {\n  color: #282d39;\n  font-weight: 400;\n}\n\n.status-pill {\n  margin-left: 8px;\n  background: #ecf8f8;\n  color: #08816a;\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 14px;\n  display: inline-block;\n  padding: 3.7px 15px;\n  vertical-align: middle;\n  border: none;\n  box-shadow: 0 1px 1.5px rgba(143, 227, 231, 0.6588235294);\n  letter-spacing: 0.01em;\n}\n\n.status-pill.unstable {\n  background: #fff2ec;\n  color: #ea544a;\n}\n\n.status-pill.stable {\n  background: #e3fbea;\n  color: #159a61;\n}\n\n.warning-list {\n  background: linear-gradient(104deg, #fffbe7 85%, #fff2d6 100%);\n  color: #b77a00;\n  border: 1px solid #ffe4b2;\n  border-radius: 7px;\n  font-size: 14.7px;\n  padding: 12px 27px 10px 22px;\n  margin-top: 10px;\n  margin-bottom: 17px;\n  line-height: 1.67;\n  box-shadow: 0 2px 7px rgba(255, 238, 204, 0.2196078431);\n}\n\n.chart-wrapper {\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 1.5px 7px rgba(207, 235, 255, 0.1529411765);\n  padding: 12px 5px 8px 5px;\n  margin: 18px auto 16px auto;\n  min-width: 0;\n  max-width: 100%; /* Ensures it fits its section */\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.chart-title {\n  color: #1273de;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 0px;\n  margin-left: 2px;\n  letter-spacing: 0.01em;\n  text-align: center;\n}\n\n.chart-wrapper canvas {\n  display: block;\n  margin: 0 auto;\n  width: 99% !important;\n  height: 160px !important;\n  max-width: 100% !important;\n  min-width: 120px !important;\n  background: #fff;\n  border-radius: 7px;\n}\n\n.droplet-sat {\n  color: #d44f24;\n  font-weight: 700;\n  font-size: 14px;\n  margin-top: 4px;\n  display: inline-block;\n  letter-spacing: 0.01em;\n}\n\n.recommend-block {\n  margin-top: 17px;\n  padding: 19px 22px 14px 16px;\n  background: linear-gradient(98deg, #ecf8ff 80%, #e7fce3 100%);\n  border-radius: 11px;\n  border: 1px solid #bde6fa;\n  box-shadow: 0 1.5px 3px rgba(189, 230, 250, 0.2666666667);\n}\n\n.recommend-block .section-title {\n  font-size: 16.5px;\n  margin-bottom: 8px;\n  color: #0a3e82;\n  letter-spacing: 0.006em;\n}\n\n@media (max-width: 600px) {\n  .waveform-widget {\n    max-width: 98vw !important;\n    padding: 16px 6vw 18px 6vw;\n    min-width: 0 !important;\n  }\n  .chart-wrapper {\n    max-width: 99vw;\n    width: 99vw;\n    min-width: 0;\n    padding: 10px 1vw 10px 1vw;\n  }\n  .chart-wrapper canvas {\n    width: 98vw !important;\n    min-width: 0 !important;\n    height: 135px !important;\n  }\n}",
    "html": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\"/>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js\"></script>\n<div id=\"root\"></div>",
    "js": "import React from 'https://esm.sh/react@18.2.0';\nimport ReactDOM from 'https://esm.sh/react-dom@18.2.0';\nconst ICONS = {\n  waveform: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"22\",\n    height: \"22\",\n    viewBox: \"0 0 22 22\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.5 12.2l.857 1.716c.54 1.08 2.01 1.15 2.624.122l3.092-5.048a1.5 1.5 0 012.498 0l3.092 5.048c.614 1.028 2.084.958 2.624-.122L18.5 12.2\",\n    stroke: \"#1882f7\",\n    strokeWidth: \"1.21\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"11\",\n    cy: \"11\",\n    r: \"10.15\",\n    stroke: \"#00bad6\",\n    strokeWidth: \"1.7\"\n  })),\n  check: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"19\",\n    height: \"19\",\n    viewBox: \"0 0 23 23\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: \"11.276\",\n    cy: \"11.5\",\n    rx: \"10.282\",\n    ry: \"10\",\n    stroke: \"#20ae75\",\n    strokeWidth: \"1.5\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.317 9.354l-4.04 4.291-2.25-2.262\",\n    stroke: \"#20ae75\",\n    strokeWidth: \"1.6\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })),\n  drop: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"20\",\n    height: \"20\",\n    viewBox: \"0 0 20 20\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 2.667l5.36 6.932a5.285 5.285 0 01-1.153 7.97A5.285 5.285 0 0110 17.333a5.285 5.285 0 01-4.207-9.401L10 2.667z\",\n    stroke: \"#20bcd3\",\n    strokeWidth: \"1.5\"\n  })),\n  shield: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"19\",\n    height: \"19\",\n    viewBox: \"0 0 20 20\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 2.5l6.25 2.5v4.01c0 4.381-2.582 8.277-6.25 9.99-3.668-1.713-6.25-5.61-6.25-9.99V5L10 2.5z\",\n    stroke: \"#475adf\",\n    strokeWidth: \"1.2\"\n  }))\n};\nfunction DataGrid({\n  data\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data-grid\"\n  }, Object.entries(data).map(([k, v]) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: k\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data-label\"\n  }, k.replace(/_/g, ' ')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"data-value\"\n  }, String(v)))));\n}\nfunction StatusPill({\n  label,\n  status\n}) {\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `status-pill ${status}`\n  }, label);\n}\nfunction DropletSat({\n  hasSatellite\n}) {\n  return hasSatellite ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"droplet-sat\"\n  }, \"\\u2753 Satellites detected\") : null;\n}\nfunction Section({\n  icon,\n  title,\n  children,\n  divider\n}) {\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\"\n  }, icon, title), children, divider ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-divider\"\n  }) : null);\n}\nfunction WarningBox({\n  warnings\n}) {\n  if (!warnings || warnings.length === 0) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"warning-list\"\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"\\u26A0 Warnings:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      margin: 0,\n      paddingLeft: 25\n    }\n  }, warnings.map((w, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i\n  }, w))));\n}\nfunction getWaveformXY(shape, params) {\n  const {\n    riseTime_us: R,\n    fallTime_us: F,\n    dwellTime_us: D,\n    recoveryTime_us: Re,\n    peakPressure_Pa: P,\n    negativePeakPressure_Pa: NP\n  } = params || {};\n  let points = [[0, 0], [R, P], [R + D, P], [R + D + F, NP], [R + D + F + Re, 0]];\n  if (shape === 'sigmoid') {\n    const steps = 24;\n    let xy = [];\n    for (let i = 0; i < steps; i++) {\n      let t = i * R / (steps - 1);\n      let y = P * (1 / (1 + Math.exp(-8 * (t / R - 0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < steps / 3; i++) {\n      let t = R + i * D / (steps / 3 - 1);\n      xy.push([t, P]);\n    }\n    for (let i = 1; i < steps; i++) {\n      let t = R + D + i * F / (steps - 1);\n      let y = P + (NP - P) * (1 / (1 + Math.exp(-8 * (i / (steps - 1) - 0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < Math.floor(steps / 2); i++) {\n      let t = R + D + F + i * Re / (Math.floor(steps / 2) - 1);\n      let y = NP + (0 - NP) * (1 / (1 + Math.exp(-7 * (i / (Math.floor(steps / 2) - 1) - 0.35))));\n      xy.push([t, y]);\n    }\n    return xy;\n  } else {\n    return points;\n  }\n}\nconst WaveformChart = ({\n  chartId,\n  params,\n  shape,\n  title\n}) => {\n  React.useEffect(() => {\n    const xy = getWaveformXY(shape, params);\n    const labels = xy.map(([x, _]) => x.toFixed(1));\n    const data = xy.map(([_, y]) => y);\n    let chartEl = document.getElementById(chartId);\n    if (!chartEl) return;\n    if (chartEl.chartInstance) {\n      chartEl.chartInstance.destroy();\n    }\n    let chart = new window.Chart(chartEl, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [{\n          label: 'Pressure (Pa)',\n          data,\n          borderColor: '#1179e6',\n          borderWidth: 2,\n          pointRadius: 2,\n          pointBackgroundColor: '#1273de',\n          pointHoverRadius: 5,\n          tension: 0.34,\n          fill: {\n            target: 'origin',\n            above: 'rgba(64,164,255,0.10)',\n            below: 'rgba(200,80,120,0.06)'\n          },\n          backgroundColor: 'rgba(40,170,250,0.04)'\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: false\n          },\n          tooltip: {\n            callbacks: {\n              label: ctx => `Pressure: ${ctx.parsed.y.toFixed(0)} Pa at ${ctx.label} μs`\n            }\n          }\n        },\n        layout: {\n          padding: 0\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Time (μs)',\n              color: '#154387',\n              font: {\n                size: 13,\n                weight: 'bold'\n              }\n            },\n            ticks: {\n              color: '#4767a1',\n              font: {\n                size: 13\n              },\n              maxTicksLimit: 3,\n              autoSkip: true\n            },\n            grid: {\n              color: '#e9f2fd',\n              drawBorder: false\n            },\n            offset: false,\n            beginAtZero: true\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Pressure (Pa)',\n              color: '#154387',\n              font: {\n                size: 13,\n                weight: 'bold'\n              }\n            },\n            ticks: {\n              color: '#4767a1',\n              font: {\n                size: 13\n              },\n              maxTicksLimit: 3,\n              autoSkip: true\n            },\n            min: Math.min(0, ...data),\n            max: Math.max(...data) * 1.13,\n            grid: {\n              color: '#f3f7fd',\n              drawBorder: false\n            },\n            offset: false\n          }\n        },\n        animation: false,\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n    chartEl.chartInstance = chart;\n    return () => {\n      chart.destroy();\n    };\n  }, [params, shape, chartId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-wrapper\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-title\"\n  }, title), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: chartId,\n    style: {\n      width: '100%',\n      height: '180px'\n    }\n  }));\n};\nfunction RecommendationWidget() {\n  // Use real Appsmith model props if available; else fallback to a mock\n  const model = appsmith.model || {\n    updatedRecommendation: {\n      waveform: {\n        riseTime_us: 10,\n        fallTime_us: 10,\n        peakPressure_Pa: 95000,\n        negativePeakPressure_Pa: -18000,\n        recoveryTime_us: 15,\n        dwellTime_us: 2.5,\n        shape: 'sigmoid'\n      },\n      droplet: {\n        size_um: 25.5,\n        velocity_mps: 6.33,\n        breakOffTime_us: 14.3,\n        hasSatellite: true,\n        stabilityClass: 'Stable'\n      },\n      isStable: false\n    },\n    data: {\n      feedbackId: 6,\n      userId: 9,\n      storedAt: 1752243708285\n    }\n  };\n  const r = model.updatedRecommendation;\n  const meta = model.data;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"waveform-widget\"\n  }, /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.check,\n    title: \"Recommendation Summary\",\n    divider: true\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 9,\n      marginTop: 8\n    }\n  }, \"Status:\", /*#__PURE__*/React.createElement(StatusPill, {\n    status: r.isStable ? 'stable' : 'unstable',\n    label: r.isStable ? 'Stable' : 'Unstable'\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 13.6,\n      color: '#9ca7b3',\n      fontWeight: 500,\n      marginBottom: 11\n    }\n  }, meta?.storedAt && /*#__PURE__*/React.createElement(React.Fragment, null, \"Saved: \", new Date(meta.storedAt).toLocaleString()))), /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.waveform,\n    title: \"Recommended Waveform\",\n    divider: true\n  }, /*#__PURE__*/React.createElement(WaveformChart, {\n    chartId: \"chart-waverec\",\n    params: r.waveform,\n    shape: r.waveform.shape,\n    title: r.waveform.shape.replace(/^(\\w)/, s => s.toUpperCase()) + ' waveform'\n  }), /*#__PURE__*/React.createElement(DataGrid, {\n    data: {\n      'Rise Time (μs)': r.waveform.riseTime_us,\n      'Fall Time (μs)': r.waveform.fallTime_us,\n      'Peak Pressure (Pa)': r.waveform.peakPressure_Pa,\n      'Negative Peak (Pa)': r.waveform.negativePeakPressure_Pa,\n      'Recovery Time (μs)': r.waveform.recoveryTime_us,\n      'Dwell Time (μs)': r.waveform.dwellTime_us,\n      'Shape': r.waveform.shape\n    }\n  })), /*#__PURE__*/React.createElement(Section, {\n    icon: ICONS.drop,\n    title: \"Predicted Droplet\"\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    data: {\n      'Size (μm)': r.droplet.size_um,\n      'Velocity (m/s)': r.droplet.velocity_mps,\n      'Break-off Time (μs)': r.droplet.breakOffTime_us,\n      'Stability': r.droplet.stabilityClass\n    }\n  }), /*#__PURE__*/React.createElement(DropletSat, {\n    hasSatellite: r.droplet.hasSatellite\n  })));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(RecommendationWidget, null), document.getElementById('root'));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 1,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "body {\n  font-family: 'Inter', system-ui, sans-serif;\n}\n.waveform-widget {\n  font-family: 'Inter', system-ui, sans-serif;\n  background: linear-gradient(112deg, #f8fafc 72%, #e6f7fa 100%);\n  padding: 32px 40px 28px 40px;\n  border-radius: 18px;\n  box-shadow: 0 4px 24px rgba(38, 125, 255, 0.06), 0 1.5px 4px rgba(75,80,90,0.03);\n  box-sizing: border-box;\n  max-width: 580px;\n  min-width: 360px;\n  margin: 0 auto;\n  border: 1px solid #e5effb;\n}\n.section-title {\n  font-size: 18.5px;\n  font-weight: 700;\n  margin-top: 18px;\n  margin-bottom: 9px;\n  color: #1f2937;\n  letter-spacing: 0.015em;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n.section-divider {\n  border-bottom: 1.5px solid #e3e9f5;\n  margin: 18px 0 9px 0;\n}\n.data-grid {\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: 10px 30px;\n  font-size: 15.2px;\n  margin-bottom: 17px;\n}\n.data-label {\n  color: #5d6e85;\n  font-weight: 500;\n  padding-right: 5px;\n  text-align: right;\n  letter-spacing: 0.01em;\n}\n.data-value {\n  color: #282d39;\n  font-weight: 400;\n}\n.status-pill {\n  margin-left: 8px;\n  background: #ecf8f8;\n  color: #08816a;\n  font-size: 14px;\n  font-weight: 600;\n  border-radius: 14px;\n  display: inline-block;\n  padding: 3.7px 15px;\n  vertical-align: middle;\n  border: none;\n  box-shadow: 0 1px 1.5px #8fe3e7a8;\n  letter-spacing: 0.01em;\n}\n.status-pill.unstable {\n  background: #fff2ec;\n  color: #ea544a;\n}\n.status-pill.stable {\n  background: #e3fbea;\n  color: #159a61;\n}\n.warning-list {\n  background: linear-gradient(104deg,#fffbe7 85%, #fff2d6 100%);\n  color: #b77a00;\n  border: 1px solid #ffe4b2;\n  border-radius: 7px;\n  font-size: 14.7px;\n  padding: 12px 27px 10px 22px;\n  margin-top: 10px;\n  margin-bottom: 17px;\n  line-height: 1.67;\n  box-shadow: 0 2px 7px #ffeecc38;\n}\n.chart-wrapper {\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 1.5px 7px #cfebff27;\n  padding: 12px 5px 8px 5px;\n  margin: 18px auto 16px auto;\n  min-width: 0;\n  max-width: 100%; /* Ensures it fits its section */\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.chart-title {\n  color: #1273de;\n  font-size: 14px;\n  font-weight: 700;\n  margin-bottom: 0px;\n  margin-left: 2px;\n  letter-spacing: 0.01em;\n  text-align: center;\n}\n.chart-wrapper canvas {\n  display: block;\n  margin: 0 auto;\n  width: 99% !important;\n  height: 160px !important;\n  max-width: 100% !important;\n  min-width: 120px !important;\n  background: #fff;\n  border-radius: 7px;\n}\n.droplet-sat {\n  color: #d44f24;\n  font-weight: 700;\n  font-size: 14px;\n  margin-top: 4px;\n  display: inline-block;\n  letter-spacing: 0.01em;\n}\n.recommend-block {\n  margin-top: 17px;\n  padding: 19px 22px 14px 16px;\n  background: linear-gradient(98deg, #ecf8ff 80%, #e7fce3 100%);\n  border-radius: 11px;\n  border: 1px solid #bde6fa;\n  box-shadow: 0 1.5px 3px #bde6fa44;\n}\n.recommend-block .section-title {\n  font-size: 16.5px;\n  margin-bottom: 8px;\n  color: #0a3e82;\n  letter-spacing: 0.006em;\n}\n@media (max-width: 600px) {\n  .waveform-widget {\n    max-width: 98vw!important;\n    padding: 16px 6vw 18px 6vw;\n    min-width: 0!important;\n  }\n  .chart-wrapper {\n    max-width: 99vw;\n    width: 99vw;\n    min-width: 0;\n    padding: 10px 1vw 10px 1vw;\n  }\n  .chart-wrapper canvas {\n    width: 98vw !important;\n    min-width: 0 !important;\n    height: 135px !important;\n  }\n}\n",
    "html": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\"/>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js\"></script>\n<div id=\"root\"></div>",
    "js": "import React from 'https://esm.sh/react@18.2.0';\nimport ReactDOM from 'https://esm.sh/react-dom@18.2.0';\n\nconst ICONS = {\n  waveform: <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\"><path d=\"M3.5 12.2l.857 1.716c.54 1.08 2.01 1.15 2.624.122l3.092-5.048a1.5 1.5 0 012.498 0l3.092 5.048c.614 1.028 2.084.958 2.624-.122L18.5 12.2\" stroke=\"#1882f7\" strokeWidth=\"1.21\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/><circle cx=\"11\" cy=\"11\" r=\"10.15\" stroke=\"#00bad6\" strokeWidth=\"1.7\"/></svg>,\n  check: <svg width=\"19\" height=\"19\" viewBox=\"0 0 23 23\" fill=\"none\"><ellipse cx=\"11.276\" cy=\"11.5\" rx=\"10.282\" ry=\"10\" stroke=\"#20ae75\" strokeWidth=\"1.5\"/><path d=\"M15.317 9.354l-4.04 4.291-2.25-2.262\" stroke=\"#20ae75\" strokeWidth=\"1.6\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/></svg>,\n  drop: <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\"><path d=\"M10 2.667l5.36 6.932a5.285 5.285 0 01-1.153 7.97A5.285 5.285 0 0110 17.333a5.285 5.285 0 01-4.207-9.401L10 2.667z\" stroke=\"#20bcd3\" strokeWidth=\"1.5\"/></svg>,\n  shield: <svg width=\"19\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\"><path d=\"M10 2.5l6.25 2.5v4.01c0 4.381-2.582 8.277-6.25 9.99-3.668-1.713-6.25-5.61-6.25-9.99V5L10 2.5z\" stroke=\"#475adf\" strokeWidth=\"1.2\"/></svg>\n};\n\nfunction DataGrid({ data }) {\n  return (\n    <div className=\"data-grid\">\n      {Object.entries(data).map(([k, v]) => (\n        <React.Fragment key={k}>\n          <div className=\"data-label\">{k.replace(/_/g, ' ')}</div>\n          <div className=\"data-value\">{String(v)}</div>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n\nfunction StatusPill({ label, status }) {\n  return <span className={`status-pill ${status}`}>{label}</span>;\n}\n\nfunction DropletSat({ hasSatellite }) {\n  return hasSatellite ? (<span className=\"droplet-sat\">❓ Satellites detected</span>) : null;\n}\n\nfunction Section({ icon, title, children, divider }) {\n  return (\n    <div>\n      <div className=\"section-title\">{icon}{title}</div>\n      {children}\n      {divider ? <div className=\"section-divider\" /> : null}\n    </div>\n  );\n}\n\nfunction WarningBox({ warnings }) {\n  if (!warnings || warnings.length === 0) return null;\n  return (\n    <div className=\"warning-list\">\n      <strong>⚠ Warnings:</strong>\n      <ul style={{ margin: 0, paddingLeft: 25 }}>\n        {warnings.map((w, i) => (\n          <li key={i}>{w}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction getWaveformXY(shape, params) {\n  const {\n    riseTime_us: R,\n    fallTime_us: F,\n    dwellTime_us: D,\n    recoveryTime_us: Re,\n    peakPressure_Pa: P,\n    negativePeakPressure_Pa: NP\n  } = params || {};\n  let points = [\n    [0, 0],\n    [R, P],\n    [R+D, P],\n    [R+D+F, NP],\n    [R+D+F+Re, 0]\n  ];\n  if(shape === 'sigmoid') {\n    const steps = 24;\n    let xy = [];\n    for (let i = 0; i < steps; i++) {\n      let t = i*R/(steps-1);\n      let y = P * (1 / (1+Math.exp(-8*(t/R-0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < steps/3; i++) {\n      let t = R + i*D/(steps/3-1);\n      xy.push([t, P]);\n    }\n    for (let i = 1; i < steps; i++) {\n      let t = R+D + i*F/(steps-1);\n      let y = P + (NP-P)*(1 / (1+Math.exp(-8*(i/(steps-1)-0.5))));\n      xy.push([t, y]);\n    }\n    for (let i = 1; i < Math.floor(steps/2); i++) {\n      let t = R+D+F + i*Re/(Math.floor(steps/2)-1);\n      let y = NP + (0-NP)*(1 / (1+Math.exp(-7*(i/(Math.floor(steps/2)-1)-0.35))));\n      xy.push([t, y]);\n    }\n    return xy;\n  } else {\n    return points;\n  }\n}\n\nconst WaveformChart = ({ chartId, params, shape, title }) => {\n  React.useEffect(() => {\n    const xy = getWaveformXY(shape, params);\n    const labels = xy.map(([x,_])=>x.toFixed(1));\n    const data = xy.map(([_,y])=>y);\n    let chartEl = document.getElementById(chartId);\n    if (!chartEl) return;\n    if (chartEl.chartInstance) {\n      chartEl.chartInstance.destroy();\n    }\n    let chart = new window.Chart(chartEl, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [\n          {\n            label: 'Pressure (Pa)',\n            data,\n            borderColor: '#1179e6',\n            borderWidth: 2,\n            pointRadius: 2,\n            pointBackgroundColor: '#1273de',\n            pointHoverRadius: 5,\n            tension: 0.34,\n            fill: {\n              target: 'origin',\n              above: 'rgba(64,164,255,0.10)',\n              below: 'rgba(200,80,120,0.06)',\n            },\n            backgroundColor: 'rgba(40,170,250,0.04)',\n          }\n        ]\n      },\n      options: {\n        plugins: {\n          legend: { display: false },\n          title: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (ctx) => `Pressure: ${ctx.parsed.y.toFixed(0)} Pa at ${ctx.label} μs`\n            }\n          }\n        },\n        layout: {\n          padding: 0\n        },\n        scales: {\n          x: {\n            title: { display: true, text: 'Time (μs)', color:'#154387', font:{size:13,weight:'bold'} },\n            ticks: { color: '#4767a1', font: {size:13}, maxTicksLimit: 3, autoSkip: true },\n            grid: { color:'#e9f2fd', drawBorder:false },\n            offset: false,\n            beginAtZero: true,\n          },\n          y: {\n            title: { display: true, text: 'Pressure (Pa)', color:'#154387', font:{size:13,weight:'bold'} },\n            ticks: { color: '#4767a1', font: {size:13}, maxTicksLimit: 3, autoSkip: true },\n            min: Math.min(0, ...data),\n            max: Math.max(...data)*1.13,\n            grid: { color:'#f3f7fd', drawBorder:false },\n            offset: false\n          }\n        },\n        animation: false,\n        responsive: true,\n        maintainAspectRatio: false,\n      }\n    });\n    chartEl.chartInstance = chart;\n    return () => { chart.destroy(); };\n  }, [params, shape, chartId]);\n\n  return (\n    <div className=\"chart-wrapper\">\n      <div className=\"chart-title\">{title}</div>\n      <canvas id={chartId} style={{width: '100%', height: '180px'}}></canvas>\n    </div>\n  );\n};\n\nfunction RecommendationWidget() {\n  // Use real Appsmith model props if available; else fallback to a mock\n  const model = appsmith.model || {\n    updatedRecommendation: {\n      waveform: {\n        riseTime_us: 10,\n        fallTime_us: 10,\n        peakPressure_Pa: 95000,\n        negativePeakPressure_Pa: -18000,\n        recoveryTime_us: 15,\n        dwellTime_us: 2.5,\n        shape: 'sigmoid',\n      },\n      droplet: {\n        size_um: 25.5,\n        velocity_mps: 6.33,\n        breakOffTime_us: 14.3,\n        hasSatellite: true,\n        stabilityClass: 'Stable',\n      },\n      isStable: false,\n    },\n    data: {\n      feedbackId: 6,\n      userId: 9,\n      storedAt: 1752243708285,\n    },\n  };\n  const r = model.updatedRecommendation;\n  const meta = model.data;\n\n  return (\n    <div className=\"waveform-widget\">\n      <Section icon={ICONS.check} title=\"Recommendation Summary\" divider>\n        <div style={{marginBottom:9,marginTop:8}}>\n          Status:\n          <StatusPill status={r.isStable ? 'stable' : 'unstable'} label={r.isStable ? 'Stable' : 'Unstable'} />\n        </div>\n        <div style={{fontSize:13.6,color:'#9ca7b3',fontWeight:500,marginBottom:11}}>\n          {meta?.storedAt && <>Saved: {new Date(meta.storedAt).toLocaleString()}</>}\n        </div>\n      </Section>\n      <Section icon={ICONS.waveform} title=\"Recommended Waveform\" divider>\n        <WaveformChart\n          chartId=\"chart-waverec\"\n          params={r.waveform}\n          shape={r.waveform.shape}\n          title={r.waveform.shape.replace(/^(\\w)/, s=>s.toUpperCase()) + ' waveform'}\n        />\n        <DataGrid data={{\n          'Rise Time (μs)': r.waveform.riseTime_us,\n          'Fall Time (μs)': r.waveform.fallTime_us,\n          'Peak Pressure (Pa)': r.waveform.peakPressure_Pa,\n          'Negative Peak (Pa)': r.waveform.negativePeakPressure_Pa,\n          'Recovery Time (μs)': r.waveform.recoveryTime_us,\n          'Dwell Time (μs)': r.waveform.dwellTime_us,\n          'Shape': r.waveform.shape,\n        }} />\n      </Section>\n      <Section icon={ICONS.drop} title=\"Predicted Droplet\">\n        <DataGrid data={{\n          'Size (μm)': r.droplet.size_um,\n          'Velocity (m/s)': r.droplet.velocity_mps,\n          'Break-off Time (μs)': r.droplet.breakOffTime_us,\n          'Stability': r.droplet.stabilityClass,\n        }} />\n        <DropletSat hasSatellite={r.droplet.hasSatellite} />\n      </Section>\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<RecommendationWidget />, document.getElementById('root'));\n});\n"
  },
  "version": 1,
  "widgetId": "01v4ym8sw3",
  "widgetName": "Custom1"
}